{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user-pc\\\\Desktop\\\\quiz-app\\\\starter\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nexport default function App() {\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [score, setScore] = useState(0);\n\n  const handleClick = (event, isCorrect) => {\n    if (isCorrect) setScore(score + 1);\n    setQuestionNumber(questionNumber + 1);\n  };\n\n  const questions = [{\n    questionText: 'What year did we start dating?',\n    answerOptions: [{\n      answerText: '2019',\n      isCorrect: false\n    }, {\n      answerText: '2017',\n      isCorrect: false\n    }, {\n      answerText: '2018',\n      isCorrect: true\n    }, {\n      answerText: '2016',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'Who is CEO of Tesla?',\n    answerOptions: [{\n      answerText: 'Jeff Bezos',\n      isCorrect: false\n    }, {\n      answerText: 'Elon Musk',\n      isCorrect: true\n    }, {\n      answerText: 'Bill Gates',\n      isCorrect: false\n    }, {\n      answerText: 'Tony Stark',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'The iPhone was created by which company?',\n    answerOptions: [{\n      answerText: 'Apple',\n      isCorrect: true\n    }, {\n      answerText: 'Intel',\n      isCorrect: false\n    }, {\n      answerText: 'Amazon',\n      isCorrect: false\n    }, {\n      answerText: 'Microsoft',\n      isCorrect: false\n    }]\n  }, {\n    questionText: 'How many Harry Potter books are there?',\n    answerOptions: [{\n      answerText: '1',\n      isCorrect: false\n    }, {\n      answerText: '4',\n      isCorrect: false\n    }, {\n      answerText: '6',\n      isCorrect: false\n    }, {\n      answerText: '7',\n      isCorrect: true\n    }]\n  }];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  }, questionNumber === questions.length ? score === questions.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }\n  }, \"You scored full points! Your prize is this code: SDFS-SDFG-SDFER-WRFS-SDFS\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 6\n    }\n  }, \"You scored \", score, \" out of \", questions.length, \", try again!\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 8\n    }\n  }, \"Question \", questionNumber + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, questions[questionNumber].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }\n  }, questions[questionNumber].answerOptions.map(d => /*#__PURE__*/React.createElement(\"button\", {\n    onClick: event => handleClick(event, d.isCorrect),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 59\n    }\n  }, d.answerText))))));\n}","map":{"version":3,"sources":["C:/Users/user-pc/Desktop/quiz-app/starter/src/App.js"],"names":["React","useState","App","questionNumber","setQuestionNumber","score","setScore","handleClick","event","isCorrect","questions","questionText","answerOptions","answerText","length","map","d"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nexport default function App() {\n\tconst [questionNumber, setQuestionNumber] = useState(0);\n\tconst [score, setScore] = useState(0);\n\n\tconst handleClick = (event, isCorrect) => {\n\t\tif (isCorrect) setScore(score + 1);\n\t\tsetQuestionNumber(questionNumber + 1)\n\t  };\n\n\tconst questions = [\n\t\t{\n\t\t\tquestionText: 'What year did we start dating?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: '2019', isCorrect: false },\n\t\t\t\t{ answerText: '2017', isCorrect: false },\n\t\t\t\t{ answerText: '2018', isCorrect: true },\n\t\t\t\t{ answerText: '2016', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Who is CEO of Tesla?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Jeff Bezos', isCorrect: false },\n\t\t\t\t{ answerText: 'Elon Musk', isCorrect: true },\n\t\t\t\t{ answerText: 'Bill Gates', isCorrect: false },\n\t\t\t\t{ answerText: 'Tony Stark', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'The iPhone was created by which company?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Apple', isCorrect: true },\n\t\t\t\t{ answerText: 'Intel', isCorrect: false },\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\n\t\t\t\t{ answerText: 'Microsoft', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'How many Harry Potter books are there?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: '1', isCorrect: false },\n\t\t\t\t{ answerText: '4', isCorrect: false },\n\t\t\t\t{ answerText: '6', isCorrect: false },\n\t\t\t\t{ answerText: '7', isCorrect: true },\n\t\t\t],\n\t\t},\n\t];\n\n\treturn (\n\t\t<>\n\t\t<div className='bg'></div>\n\t\t<div className='app'>\n\t\t\t{/* HINT: replace \"false\" with logic to display the \n      score when the user has answered all the questions */}\n\t\t\t{questionNumber === questions.length ? (\n\t\t\t\tscore === questions.length ?\n\t\t\t\t(<div className='score-section'>You scored full points! Your prize is this code: SDFS-SDFG-SDFER-WRFS-SDFS</div>) : \n\t\t\t\t(<div className='score-section'>You scored {score} out of {questions.length}, try again!</div>)\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {questionNumber + 1}</span>/{questions.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='question-text'>{questions[questionNumber].questionText}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t questions[questionNumber].answerOptions.map(d => (<button onClick={event => handleClick(event, d.isCorrect)}>{d.answerText}</button>))\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t\t</>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}